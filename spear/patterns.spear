Definitions patterns

Types:
	subrange_n1_1:  {i : int | -1 <= i and i <= 1}
	subrange_n1_2 : {i : int | -1 <= i and i <= 2}
	subrange_n1_3 : {i : int | -1 <= i and i <= 3}

Constants:
	UNREACHABLE : int = -1

Patterns:

	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_a_precedes_b */
	pattern after_p_a_precedes_b(p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 3
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if a
	         then 2
	         else if (not a and not b)
	         then 1
	         else if (not a and b)
	         then 3
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	         
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_a_responds_to_b
	 * 
	 * This is a liveness property. Better to use after_p_a_responds_to_b_within_n
	 */
	pattern after_p_a_responds_to_b(p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if a
	         then 1
	         else if (not a and not b)
	         then 1
	         else if (not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if a
	         then 1
	         else if (not a)
	         then 2
	         else UNREACHABLE
	      else UNREACHABLE
	   
	   holds = (state == 0) or (state == 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_a_responds_to_b_within_n */
	pattern after_p_a_responds_to_b_within_n(p : bool, a : bool, b : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n 
	
	   pre_i = previous i with initial value 0
	   
	   i = 
	      if (pre_state == 0)
	      then
	         if (p and not a and b)
	         then 0
	         else pre_i
	      else if (pre_state == 1)
	      	then
	         if (not a) 
	         then pre_i + 1 
	         else pre_i
	      else pre_i
	
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and not a and b)
	         then 1
	         else if (p and a)
	         then 2
	         else if (p and not a and not b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not a and (i < latched_n))
	         then 1
	         else if (not a and (i >= latched_n))
	         then 3
	         else if a
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if a
	         then 2
	         else if (not a and not b)
	         then 2
	         else if (not a and b)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	   
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_always_a */
	pattern after_p_always_a(p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if a
	         then 1
	         else if not a
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_exists_a 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use after_p_exists_a_within_n
	 * */
	pattern after_p_exists_a(p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and not a)
	         then 1
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not a)
	         then 1
	         else if a
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state == 0) or (state == 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_exists_a_within_n */
	pattern after_p_exists_a_within_n(p : bool, a : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	   
	   pre_i = previous i with initial value 0
	   
	   i = 
	      if (pre_state == 0)
	      then
	         if p
	         then 0
	         else pre_i
	      else if (pre_state == 1)
	      then
	         if not a
	         then pre_i + 1
	         else pre_i
	      else if (pre_state == 2)
	      then pre_i
	      else if (pre_state == 3)
	      then pre_i
	      else pre_i
	
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then 
	         if (not p)
	         then 0
	         else if (p and not a)
	         then 
	            if (latched_n == 0)
	            then 3
	            else 1
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not a and (i < latched_n))
	         then 1
	         else if (not a and (i >= latched_n))
	         then 3
	         else if a
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	         
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_a_precedes_b */
	pattern after_p_until_q_a_precedes_b(p : bool, q : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then 
	         if (not p)
	         then 0
	         else if (p and q)
	         then 0
	         else if (p and not q and a)
	         then 0
	         else if (p and not q and not a and not b)
	         then 1
	         else if (p and not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 0
	         else if a 
	         then 0
	         else if (not q and not a and not b)
	         then 1
	         else if (not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	         
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_a_responds_to_b 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use after_p_until_q_a_responds_to_b_within_n
	 * 
	 * */
	pattern after_p_until_q_a_responds_to_b(p : bool, q : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if(not p)
	         then 0
	         else if(p and q)
	         then 0
	         else if(p and not q and a)
	         then 1
	         else if(p and not q and not a and not b)
	         then 1
	         else if(p and not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 0
	         else if (not q and a)
	         then 1
	         else if (not q and not a and not b)
	         then 1
	         else if (not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if q
	         then 3
	         else if (not q and not a)
	         then 2
	         else if (not q and a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	   
	   holds = (state == 0) or (state == 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_a_responds_to_b_within_n */
	pattern after_p_until_q_a_responds_to_b_within_n(p : bool, q : bool, a : bool, b : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	
	   pre_i = previous i with initial value i
	   
	   i = 
		  if (pre_state == 1)
		  then
			if (not q and not a and b)
			then 0
			else pre_i
		  else if (pre_state == 2)
		  then
			if (not q and not a)
			then pre_i + 1
			else pre_i
		  else pre_i
	   
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if(not p)
	         then 0
	         else if(p and q)
	         then 0
	         else if(p and not q and a)
	         then 1
	         else if(p and not q and not a and not b)
	         then 1
	         else if(p and not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 0
	         else if (not q and a)
	         then 1
	         else if (not q and not a and not b)
	         then 1
	         else if (not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if q
	         then 3
	         else if (not q and not a and (i < latched_n))
	         then 2
			 else if (not q and not a and (i >= latched_n))
			 then 3
	         else if (not q and a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	   
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_always_a */
	pattern after_p_until_q_always_a(p : bool, q : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state =
	      if (pre_state == 0)
	      then
	         if(not p)
	         then 0
	         else if(p and q)
	         then 0
	         else if(p and not q and a)
	         then 1
	         else if(p and not q and not a)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 1)
	      then
	         if q
	         then 0
	         else if (not q and a)
	         then 1
	         else if (not q and not a)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_exists_a 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use after_p_until_q_exists_a_within_n
	 * */
	pattern after_p_until_q_exists_a(p : bool, q : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if(p and q)
	         then 0
	         else if(p and not a and not q)
	         then 1
	         else if(p and a and not q)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 3
	         else if (not q and a)
	         then 2
	         else if (not q and not a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if q
	         then 0
	         else if (p and not q and a)
	         then 2
	         else if (p and not q and not a)
	         then 1
	         else if (not p and not q)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state == 0) or (state == 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/after_p_until_q_exists_a_within_n */
	pattern after_p_until_q_exists_a_within_n(p : bool, q : bool, a : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	
	   pre_i = previous i with initial value 0
	   
	   i = 
	      if (pre_state == 0)
	      then
	         if (p and not q and not a)
	         then 0
	         else pre_i
	      else if (pre_state == 1)
	      then
	         if (not q and not a)
	         then pre_i + 1
	         else pre_i
	      else if (pre_state == 2)
	      then
	         if (p and not q and not a)
	         then 0
	         else pre_i
	      else pre_i
	   
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and q)
	         then 0
	         else if (p and not q and not a)
	         then 1
	         else if (p and not q and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 3
	         else if (not q and not a and (i < latched_n))
	         then 1
	         else if (not q and not a and (i >= latched_n))
	         then 3
	         else if (not q and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if q
	         then 0
	         else if (p and not q and a)
	         then 2
	         else if (p and not q and not a)
	         then 1
	         else if (not p and not q)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/before_p_a_precedes_b */
	pattern before_p_a_precedes_b(p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state =
	      if (pre_state == 0)
	      then
	         if p
	         then 1
	         else if a
	         then 1
	         else if (not p and not a and b)
	         then 2
	         else if (not p and not a and not b)
	         then 0
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then 1
	      else if (pre_state == 2)
	      then
	         if p
	         then 3
	         else if (not p)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/before_p_a_responds_to_b */
	pattern before_p_a_responds_to_b(p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if p
	         then 2
	         else if (not p and not b)
	         then 0
	         else if (not p and a and b)
	         then 0
	         else if (not p and not a and b)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if p
	         then 3
	         else if (not p and not a)
	         then 1
	         else if (not p and a)
	         then 0
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/before_p_always_a */
	pattern before_p_always_a(p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state =
	      if (pre_state == 0)
	      then
	         if p
	         then 1
	         else if(not p and a)
	         then 0
	         else if(not p and not a)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 1)
	      then 1
	      else if(pre_state == 2)
	      then
	         if(not p)
	         then 2
	         else if p
	         then 3
	         else UNREACHABLE
	      else if(pre_state == 3)
	      then 3
	      else UNREACHABLE
	
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/before_p_exists_a */
	pattern before_p_exists_a(p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if p
	         then 2
	         else if(not p and not a)
	         then 0
	         else if(not p and a)
	         then 1
	         else UNREACHABLE
	      else if(pre_state == 1)
	      then 1
	      else if(pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/between_p_and_q_a_precedes_b */
	pattern between_p_and_q_a_precedes_b (p : bool, q : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state =
	      if(pre_state == 0)
	      then
	         if not p
	         then 0
	         else if (p and q)
	         then 0
	         else if (p and a)
	         then 0
	         else if (p and not q and not a and not b)
	         then 1
	         else if (p and not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 1)
	      then
	         if q
	         then 0
	         else if a 
	         then 0
	         else if (not q and not a and not b)
	         then 1
	         else if (not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 2)
	      then 
	         if q
	         then 3
	         else if (not q)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/between_p_and_q_a_responds_to_b */
	pattern between_p_and_q_a_responds_to_b (p : bool, q : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state =
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and q)
	         then 0
	         else if (p and not q and not b)
	         then 1
	         else if (p and not q and a and b)
	         then 1
	         else if (p and not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 0
	         else if (not q and not b)
	         then 1
	         else if (not q and a and b)
	         then 1
	         else if (not q and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 
	         if q
	         then 3
	         else if (not q and not a)
	         then 2
	         else if (not q and a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	      holds = (state <> 3)
	      prop1 = (state <> UNREACHABLE)
	      --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/between_p_and_q_always_a */
	pattern between_p_and_q_always_a (p : bool, q : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if(p and q)
	         then 0
	         else if(p and not q and a)
	         then 1
	         else if(p and not q and not a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 0
	         else if(not q and a)
	         then 1
	         else if(not q and not a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if q
	         then 3
	         else if (not q)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	      holds = (state <> 3)
	      prop1 = (state <> UNREACHABLE)
	      --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/between_p_and_q_exists_a */
	pattern between_p_and_q_exists_a(p : bool, q : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if q
	         then 0
	         else if a
	         then 0
	         else if (p and not q and not a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if q
	         then 2
	         else if (not q and not a)
	         then 1
	         else if (not q and a)
	         then 0
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_a_precedes_b */
	pattern globally_a_precedes_b (a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if a
	         then 1
	         else if(not a and not b)
	         then 0
	         else if(not a and b)
	         then 2
	         else UNREACHABLE
	      else if(pre_state == 1)
	      then 1
	      else if(pre_state == 2)
	      then 2
	      else UNREACHABLE
	
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_a_responds_to_b 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use globally_a_responds_to_b_within_n
	 * */
	pattern globally_a_responds_to_b(a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_1
	   pre_state : subrange_n1_1
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then 
	         if (not b)
	         then 0
	         else if (a and b)
	         then 0
	         else if (not a and b)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not a)
	         then 1
	         else if a
	         then 0
	         else UNREACHABLE
	      else UNREACHABLE
	      
	   holds = (state == 0)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_a_responds_to_b_within_n */
	pattern globally_a_responds_to_b_within_n(a : bool, b : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   latch_n : int
	   i : int
	   pre_i : int
	   prop1 : bool
	let
	   latch_n = previous latch_n with initial value n
	
	   pre_i = previous i with initial value 0
	   
	   i = 
	      if (pre_state == 0)
	      then 
	         if (b and not a)
	         then 0
	         else pre_i
	      else if (pre_state == 1)
	      then
	         if (not a)
	         then pre_i + 1
	         else if (a and b)
	         then 0
	         else pre_i
	      else if (pre_state == 2)
	      then pre_i
	      else pre_i
	   
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then
	         if (not b)
	         then 0
	         else if (a and b)
	         then 0
	         else if (not a and b)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (a and b)
	         then 1
	         else if (not a and (i < latch_n))
	         then 1
	         else if (not a and (i >= latch_n))
	         then 2
	         else if (a and not b)
	         then 0
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_always_a */
	pattern globally_always_a (a : bool) returns (holds : bool)
	var
	   state : subrange_n1_1
	   pre_state : subrange_n1_1
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then
	         if (a)
	         then 0
	         else if (not a)
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then 1
	      else UNREACHABLE
	         
	   holds = (state <> 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_exists_a 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use globally_exists_a_within_n
	 * */
	pattern globally_exists_a(a : bool) returns (holds : bool)
	var
	   state : subrange_n1_1
	   pre_state : subrange_n1_1
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then
	         if (not a)
	         then 0
	         else if a
	         then 1
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then 1
	      else UNREACHABLE
	      
	   holds = (state == 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/globally_exists_a_within_n */
	pattern globally_exists_a_within_n(a : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	
	   pre_i = previous i with initial value 0
	   
	   i = 
		  if (pre_state == 0)
		  then
			if (not a and pre_i < latched_n)
			then
				pre_i + 1
			else if (not a and pre_i >= latched_n)
			then
				pre_i
			else if a
			then
				pre_i
			else pre_i
		  else if (pre_state == 1)
		  then pre_i
		  else if (pre_state == 2)
		  then pre_i
		  else pre_i
	
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then
	         if (not a and i < latched_n)
	         then 0
	         else if (not a and i >= latched_n)
			 then 2
			 else if a
			 then 1
			 else UNREACHABLE
	      else if (pre_state == 1)
	      then 1
		  else if (pre_state == 2)
		  then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_a_precedes_b */
	pattern while_p_a_precedes_b (p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_2
	   pre_state : subrange_n1_2
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if(pre_state == 0)
	      then
	         if(not p)
	         then 0
	         else if (p and a)
	         then 0
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not p)
	         then 0
	         else if a
	         then 0
	         else if(p and not a and not b)
	         then 1
	         else if(p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then 2
	      else UNREACHABLE
	      
	   holds = (state <> 2)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_a_responds_to_b
	 * 
	 * This is a liveness property and as such, not reliable. Better to use while_p_a_responds_to_b_within_n
	 */
	pattern while_p_a_responds_to_b(p : bool, a : bool, b : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if (not p)
	         then 3
	         else if (p and a)
	         then 1
	         else if (p and not a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	         
	   holds = (state == 0) or (state == 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_a_responds_to_b_within_n */
	pattern while_p_a_responds_to_b_within_n(p : bool, a : bool, b : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	
	   pre_i = previous i with initial value 0
	   
	   i = 
		  if (pre_state == 1)
		  then
			if (p and not a and b)
			then 0
			else pre_i
		  else if (pre_state == 2)
		  then
			if (p and not a)
			then pre_i + 1
			else pre_i
		  else pre_i
	   
	   pre_state = previous state with initial value 0
	   
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not p)
	         then 0
	         else if (p and a)
	         then 1
	         else if (p and not a and not b)
	         then 1
	         else if (p and not a and b)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if (not p)
	         then 3
	         else if (p and a)
	         then 1
	         else if (p and not a and (i < latched_n))
	         then 2
			 else if (p and not a and (i >= latched_n))
			 then 3
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	         
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_always_a */
	pattern while_p_always_a (p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_1
	   pre_state : subrange_n1_1
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if(pre_state == 0) 
	      then
	         if (not p) 
	         then 0
	         else if (p and a)
	         then 0
	         else if (p and not a)
	         then 1
	         else UNREACHABLE
	      else if(pre_state == 1) 
	      then 1
	      else UNREACHABLE
	      
	   holds = (state <> 1)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_exists_a 
	 * 
	 * This is a liveness property and as such, not reliable. Better to use while_p_exists_a_within_n
	 * */
	pattern while_p_exists_a(p : bool, a : bool) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   prop1 : bool
	let
	   pre_state = previous state with initial value 0
	
	   state = 
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and not a)
	         then 1
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not p)
	         then 3
	         else if (p and not a)
	         then 1
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if (not p)
	         then 0
	         else if p
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel
	
	/* https://github.com/lgwagner/pattern-observers/tree/master/lustre-observers/while_p_exists_a_within_n */
	pattern while_p_exists_a_within_n(p : bool, a : bool, n : int) returns (holds : bool)
	var
	   state : subrange_n1_3
	   pre_state : subrange_n1_3
	   i : int
	   pre_i : int
	   latched_n : int
	   prop1 : bool
	let
	   latched_n = previous latched_n with initial value n
	   
	   pre_i = previous i with initial value 0
	   
	   i = 
	      if (pre_state == 0)
	      then
	         if (p and not a)
	         then 0
	         else pre_i
	      else if (pre_state == 1)
	      then
	         if (p and not a)
	         then pre_i+1
	         else pre_i
	      else pre_i
	      
	   pre_state = previous state with initial value 0
	   
	   state =
	      if (pre_state == 0)
	      then
	         if (not p)
	         then 0
	         else if (p and not a)
	         then 1
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 1)
	      then
	         if (not p)
	         then 3
	         else if (p and not a and (i < latched_n))
	         then 1
	         else if (p and not a and (i >= latched_n))
	         then 3
	         else if (p and a)
	         then 2
	         else UNREACHABLE
	      else if (pre_state == 2)
	      then
	         if p
	         then 2
	         else if (not p)
	         then 0
	         else UNREACHABLE
	      else if (pre_state == 3)
	      then 3
	      else UNREACHABLE
	      
	   holds = (state <> 3)
	   prop1 = (state <> UNREACHABLE)
	   --%PROPERTY prop1
	tel