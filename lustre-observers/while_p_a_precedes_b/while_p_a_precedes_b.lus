-- [](Q & !R -> (!P W (S | R)))
-- G((Q & !R) -> (!P W (S | R)))
-- Q = p, R = !p, S = a, P = b
-- G((p & p) -> (!b W (a | !p)))
-- G(p -> (!b W (a | !p)))
-- G(p -> (!b U ((a | !p) | G !b)))
-- LTLSPEC G(p -> (!b U ((a | !p) | G !b))) <-> G holds
node while_p_a_precedes_b (p : bool; a : bool; b : bool) returns (holds : bool);
var
   state,pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state = 
      if(pre_state = 0)
      then
         if(not p)
         then 0
         else if (p and a)
         then 0
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not p)
         then 0
         else if a
         then 0
         else if(p and not a and not b)
         then 1
         else if(p and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then 2
      else -1;
      
   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;