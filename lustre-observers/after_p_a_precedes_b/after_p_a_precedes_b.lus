-- after Q :: S precedes P
-- !Q W (Q & (!P W S))
-- LTLSPEC !Q W (Q & (!P U (S | G !P)))
-- LTLSPEC !Q U ((Q & (!P U (S | G !P))) | G !Q)
-- LTLSPEC (!p U ((p & (!b U (a | G !b))) | G !p)) <-> G holds
node after_p_a_precedes_b(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 3
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if a
         then 2
         else if (not a and not b)
         then 1
         else if (not a and b)
         then 3
         else -1
      else if (pre_state = 2)
      then 2
      else if (pre_state = 3)
      then 3
      else -1;
         
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;
