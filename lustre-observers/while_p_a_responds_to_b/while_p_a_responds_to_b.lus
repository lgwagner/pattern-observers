--[](Q & !R -> ((P -> (!R U (S & !R))) W R))
--G((Q & !R) -> ((P -> (!R U (S & !R))) W R))
--Q=p,R=!p,S=a,P=b
--G(p -> ((b -> (p U (a & p))) W !p))
--G(p -> ((b -> (p U (a & p))) U (!p | G ((b -> (p U (a & p)))))))
--LTLSPEC G(p -> ((b -> (p U (a & p))) U (!p | G ((b -> (p U (a & p))))))) <-> G F holds
node while_p_a_responds_to_b(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and a)
         then 1
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not p)
         then 0
         else if (p and a)
         then 1
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if (not p)
         then 3
         else if (p and a)
         then 1
         else if (p and not a)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1 ;
         
   holds = (state = 0) or (state = 1);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;
