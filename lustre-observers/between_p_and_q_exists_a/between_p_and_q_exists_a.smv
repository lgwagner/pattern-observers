-----------------------------------------------------------------------
-- Lustre2smv translation of specification: between_p_and_q_exists_a
-- Version 1.1 Build Date: Tue Nov  6 10:01:12 2012
-- Written by Mike Whalen, Anjali Joshi, Dan O'Brien, Ajitha Rajan, and
-- Lucas Wagner 
-- Copyright 2004 Rockwell-Collins Inc and the University of Minnesota.
-- All Rights Reserved
-----------------------------------------------------------------------


--
--module: between_p_and_q_exists_a_node implements node: between_p_and_q_exists_a_node
--

MODULE between_p_and_q_exists_a_node(p,
         q,
         a)

   VAR 
      state : -1 ..2 ; 

   DEFINE 
      holds := (state != 2) ; 

   ASSIGN 
      init(state) := 
         (case 
            (! p) : 0; 
            q : 0; 
            a : 0; 
            ((p & 
            (! q)) & 
            (! a)) : 1; 
            TRUE : -1 ; 
         esac)  ; 
      
      next(state) := 
         (case 
            (state = 0) : 
            (case 
               (! next(p)) : 0; 
               next(q) : 0; 
               next(a) : 0; 
               ((next(p) & 
               (! next(q))) & 
               (! next(a))) : 1; 
               TRUE : -1 ; 
            esac) ; 
            (state = 1) : 
            (case 
               next(q) : 2; 
               (! next(a)) : 1; 
               TRUE : 0; 
            esac) ; 
            (state = 2) : 2; 
            TRUE : -1 ; 
         esac)  ; 

-- end MODULE between_p_and_q_exists_a_node




--
--module: main is the main module for specification with root node: between_p_and_q_exists_a
--

MODULE main
   VAR 
      between_p_and_q_exists_a : between_p_and_q_exists_a_node(p,
               q,
               a) ; 
      p : boolean ; 
      q : boolean ; 
      a : boolean ; 

   DEFINE 
      holds := between_p_and_q_exists_a.holds ; 

-- end MODULE main



-----------------------------------------------------------------------
-- end of translation of specification: between_p_and_q_exists_a
-----------------------------------------------------------------------
LTLSPEC G((p & !q) -> (!q U ((a & !q) | G !q))) <-> G holds
